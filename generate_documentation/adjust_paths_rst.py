"""
This script corrects the module paths in the `modules.rst` file generated by Sphinx.

It ensures that all module paths in the `modules.rst` file are prefixed with the project root 
module name (`MS-CHARAC-BACK.`). This is necessary for Sphinx to correctly locate and document 
the modules within the project.

The script performs the following steps:
1. Reads the content of the `modules.rst` file.
2. Checks each line for the `.. automodule::` directive.
3. Adds the project root prefix (`MS-CHARAC-BACK.`) to the module name if it is not already present.
4. Writes the corrected content back to the `modules.rst` file.

Usage:
    Simply run the script in an environment where the `BASE_DIR` environment variable is set 
    to the root directory of your project.

Examples:
    Assuming the `BASE_DIR` environment variable is set, run the script as follows:

    ```python
    python correct_modules_rst.py
    ```

Notes:
    - Ensure that the `BASE_DIR` environment variable is correctly set to the root directory 
      of your project before running this script.
    - This script assumes that the `modules.rst` file is located in the `docs` directory 
      under the project root.

Possible Errors:
    - FileNotFoundError: If the `modules.rst` file is not found at the specified path.
    - IOError: If there are issues with reading from or writing to the `modules.rst` file.
"""

import os


work_dir = os.getenv("BASE_DIR")

# Path to the generated modules.rst
modules_rst = os.path.join(work_dir, 'docs', 'modules.rst')

# Read the content of modules.rst
with open(modules_rst, 'r') as file:
    lines = file.readlines()

# Correcting paths by adding the project root to the modules
corrected_lines = []
for line in lines:
    if line.startswith('.. automodule::'):
        parts = line.split()
        if len(parts) > 2:
            module_name = parts[2]
            if not module_name.startswith('MS-CHARAC-BACK.'):
                corrected_lines.append(f'.. automodule:: MS-CHARAC-BACK.{module_name}\n')
            else:
                corrected_lines.append(line)
        else:
            corrected_lines.append(line)
    else:
        corrected_lines.append(line)

# Write the corrected content back to modules.rst
with open(modules_rst, 'w') as file:
    file.writelines(corrected_lines)
